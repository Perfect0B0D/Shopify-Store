{{ 'component-accordion.css' | asset_url | stylesheet_tag }}
{{ 'collapsible-content.css' | asset_url | stylesheet_tag }}
{{ 'custom-collapsible-content.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<div class="custom-faq-parent-wrapper color-{{ section.settings.color_scheme }} section-{{ section.id }}-padding gradient">
  <div class="page-width custom-faq-wrapper">
    <div class="custom-faq-index-wrapper color-{{ section.settings.container_color_scheme }}">
      <h2 class="custom-faq-header collapsible-content__heading inline-richtext h1">FAQ</h2>
      <div class="faq-navigation-item-parent">
      {% assign i = 1 %}
      {%- for block in section.blocks -%}
        <div class="faq-navigation-item-wrapper tabIndex-{{ i }}">
          <strong>
          <a data-target="#tabIndex-{{ i }}" class="faq-navigation-item">{{ block.settings.heading }}</a>
          </strong>
          {% assign i = i | plus: 1 %}
        </div>
      {%- endfor -%}
      </div>
    </div>
    <div class="custom-faq-content-wrapper color-{{ section.settings.container_color_scheme }}">
      {% assign j = 1 %}
      {%- for block in section.blocks -%}
        <div id="tabIndex-{{ j }}" class="faq-individual-wrapper tabIndex-{{ j }}">
          <div class="faq-individual-header collapsible-content__header scroll-trigger animate--slide-in" style="text-align: {{ block.settings.heading_alignment }};">
            {%- if block.settings.heading != blank -%}
              <h2 class="collapsible-content__heading inline-richtext {{ block.settings.heading_size }}">
                {{ block.settings.heading }}
              </h2>
            {%- else -%}
              <h2 class="visually-hidden">{{ 'accessibility.collapsible_content_title' | t }}</h2>
            {% endif %}
          </div>
          {% for i in (1..10) %}
            {% liquid
              assign question_key = 'question_' | append: i
              assign answer_key = 'answer_' | append: i
            %}
            {% if block.settings[question_key] != blank %}
              <div class="accordion faq-individual-content" {{ block.shopify_attributes }}>
                <details
                  id="Details-{{ block.id }}-{{i}}-{{ section.id }}"
                  {% if block.settings.open_first_collapsible_row and forloop.first %}
                  open
                  {% endif %}>
                  <summary id="Summary-{{ block.id }}-{{i}}-{{ section.id }}">
                    {% render 'icon-accordion'
                      , icon: block.settings.icon %}
                    <p class="accordion__title inline-richtext">
                      <strong>
                      {{ block.settings[question_key] }}
                      </strong>
                    </p>
                    {% render 'icon-caret' %}
                  </summary>
                  <div
                    class="accordion__content rte"
                    id="CollapsibleAccordion-{{ block.id }}-{{i}}-{{ section.id }}"
                    role="region"
                    aria-labelledby="Summary-{{ block.id }}-{{i}}-{{ section.id }}">
                    {{ block.settings[answer_key] }}
                  </div>
                </details>
              </div>
            {% endif %}
          {% endfor %}
        </div>
        {% assign j = j | plus: 1 %}
      {%- endfor -%}
    </div>
  </div>
</div>

{% javascript %}
  let isScrollingProgrammatically = false;

  function updateActiveNavigation() {
    if (isScrollingProgrammatically) return;

    const scrollPosition = window.pageYOffset;
    const sections = document.querySelectorAll('.faq-individual-wrapper');
    let currentActive = null;

    sections.forEach(section => {
      const sectionTop = section.offsetTop;
      const sectionHeight = section.offsetHeight;
      if (scrollPosition >= sectionTop - 100 && scrollPosition < sectionTop + sectionHeight + 100) {
        currentActive = section;
      }
    });

    if (currentActive) {
      document.querySelectorAll('.faq-navigation-item-wrapper').forEach(div => div.classList.remove('faq-navigation-item-wrapper-active'));
      const navigationClass = currentActive.classList[1];
      const correspondingNavigation = document.querySelector(`.faq-navigation-item-wrapper.${navigationClass}`);
      if (correspondingNavigation) {
        correspondingNavigation.classList.add('faq-navigation-item-wrapper-active');
      }
    }
  }

  window.addEventListener('scroll', updateActiveNavigation);
  updateActiveNavigation();

  document.querySelectorAll('.faq-navigation-item').forEach(item => {
    item.addEventListener('click', function(event) {
      event.preventDefault();
      document.querySelectorAll('.faq-navigation-item-wrapper').forEach(div => div.classList.remove('faq-navigation-item-wrapper-active'));
      const parentWrapper = this.closest('.faq-navigation-item-wrapper');
      if (parentWrapper) {
        parentWrapper.classList.add('faq-navigation-item-wrapper-active');
      }
      const targetSelector = this.getAttribute('data-target');
      const target = document.querySelector(targetSelector);

      if (!target) {
        console.error('Target element not found');
        return;
      }

      const scrollDuration = 500;

      let startTime = null;
      const startScroll = window.pageYOffset;
      const targetOffset = target.offsetTop - 150;

      isScrollingProgrammatically = true;

      function scrollAnimation(currentTime) {
        if (startTime === null) startTime = currentTime;

        const elapsedTime = currentTime - startTime;
        const progress = Math.min(elapsedTime / scrollDuration, 1);
        const ease = progress < 0.5
          ? 2 * progress * progress
          : -1 + (4 - 2 * progress) * progress; 

        window.scrollTo(0, ease * (targetOffset - startScroll) + startScroll);

        if (elapsedTime < scrollDuration) {
          requestAnimationFrame(scrollAnimation);
        } else {
          setTimeout(() => {
            isScrollingProgrammatically = false;
          }, 50); 
        }
      }

      requestAnimationFrame(scrollAnimation);
    });
  });
    const firstSection = document.querySelector('.faq-individual-wrapper');
    const firstNavItem = document.querySelector('.faq-navigation-item');
    
    if (firstSection && firstNavItem) {
        const firstSectionTop = firstSection.offsetTop;
        
        // Check if the scroll position is greater than the offsetTop of the first section
        if (window.pageYOffset > firstSectionTop - 10) {
            firstNavItem.click();
        }
    }
{% endjavascript %}


{% schema %}
  {
    "name": "FAQ Multi-Collapsible",
    "tag": "section",
    "class": "section",
    "disabled_on": {
      "groups": ["header", "footer"]
    },
    "settings": [
      {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:sections.all.colors.label",
        "default": "scheme-1"
      }, {
        "type": "color_scheme",
        "id": "container_color_scheme",
        "label": "t:sections.collapsible_content.settings.container_color_scheme.label",
        "info": "t:sections.collapsible_content.settings.container_color_scheme.info",
        "default": "scheme-2"
      }, {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_top",
        "default": 36
      }, {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_bottom",
        "default": 36
      }
    ],
    "blocks": [
      {
        "type": "custom_collapsible_row",
        "name": "custom_collapsible_row",
        "settings": [
          {
            "type": "text",
            "id": "heading",
            "default": "Heading",
            "label": "Heading"
          },
          {
            "type": "checkbox",
            "id": "open_first_collapsible_row",
            "default": false,
            "label": "t:sections.collapsible_content.settings.open_first_collapsible_row.label"
          },
          {
            "type": "select",
            "id": "icon",
            "options": [
              {
                "value": "none",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__1.label"
              },
              {
                "value": "apple",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__2.label"
              },
              {
                "value": "banana",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__3.label"
              },
              {
                "value": "bottle",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__4.label"
              }, {
                "value": "box",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__5.label"
              }, {
                "value": "carrot",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__6.label"
              }, {
                "value": "chat_bubble",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__7.label"
              }, {
                "value": "check_mark",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__8.label"
              }, {
                "value": "clipboard",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__9.label"
              }, {
                "value": "dairy",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__10.label"
              }, {
                "value": "dairy_free",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__11.label"
              }, {
                "value": "dryer",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__12.label"
              }, {
                "value": "eye",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__13.label"
              }, {
                "value": "fire",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__14.label"
              }, {
                "value": "gluten_free",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__15.label"
              }, {
                "value": "heart",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__16.label"
              }, {
                "value": "iron",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__17.label"
              }, {
                "value": "leaf",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__18.label"
              }, {
                "value": "leather",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__19.label"
              }, {
                "value": "lightning_bolt",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__20.label"
              }, {
                "value": "lipstick",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__21.label"
              }, {
                "value": "lock",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__22.label"
              }, {
                "value": "map_pin",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__23.label"
              }, {
                "value": "nut_free",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__24.label"
              }, {
                "value": "pants",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__25.label"
              }, {
                "value": "paw_print",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__26.label"
              }, {
                "value": "pepper",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__27.label"
              }, {
                "value": "perfume",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__28.label"
              }, {
                "value": "plane",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__29.label"
              }, {
                "value": "plant",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__30.label"
              }, {
                "value": "price_tag",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__31.label"
              }, {
                "value": "question_mark",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__32.label"
              }, {
                "value": "recycle",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__33.label"
              }, {
                "value": "return",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__34.label"
              }, {
                "value": "ruler",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__35.label"
              }, {
                "value": "serving_dish",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__36.label"
              }, {
                "value": "shirt",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__37.label"
              }, {
                "value": "shoe",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__38.label"
              }, {
                "value": "silhouette",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__39.label"
              }, {
                "value": "snowflake",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__40.label"
              }, {
                "value": "star",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__41.label"
              }, {
                "value": "stopwatch",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__42.label"
              }, {
                "value": "truck",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__43.label"
              }, {
                "value": "washing",
                "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.options__44.label"
              }
            ],
            "default": "check_mark",
            "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.icon.label"
          },
          {
            "type": "select",
            "id": "heading_size",
            "options": [
              {
                "value": "h2",
                "label": "t:sections.all.heading_size.options__1.label"
              },
              {
                "value": "h1",
                "label": "t:sections.all.heading_size.options__2.label"
              },
              {
                "value": "h0",
                "label": "t:sections.all.heading_size.options__3.label"
              },
              {
                "value": "hxl",
                "label": "t:sections.all.heading_size.options__4.label"
              }, {
                "value": "hxxl",
                "label": "t:sections.all.heading_size.options__5.label"
              }
            ],
            "default": "h1",
            "label": "t:sections.all.heading_size.label"
          }, {
            "type": "select",
            "id": "heading_alignment",
            "label": "t:sections.collapsible_content.settings.heading_alignment.label",
            "options": [
              {
                "value": "left",
                "label": "t:sections.collapsible_content.settings.heading_alignment.options__1.label"
              }, {
                "value": "center",
                "label": "t:sections.collapsible_content.settings.heading_alignment.options__2.label"
              }, {
                "value": "right",
                "label": "t:sections.collapsible_content.settings.heading_alignment.options__3.label"
              }
            ],
            "default": "center"
          }, {
            "type": "text",
            "id": "question_1",
            "label": "Question 1"
          }, {
            "type": "richtext",
            "id": "answer_1",
            "label": "Answer 1"
          }, {
            "type": "text",
            "id": "question_2",
            "label": "Question 2"
          }, {
            "type": "richtext",
            "id": "answer_2",
            "label": "Answer 2"
          }, {
            "type": "text",
            "id": "question_3",
            "label": "Question 3"
          }, {
            "type": "richtext",
            "id": "answer_3",
            "label": "Answer 3"
          }, {
            "type": "text",
            "id": "question_4",
            "label": "Question 4"
          }, {
            "type": "richtext",
            "id": "answer_4",
            "label": "Answer 4"
          }, {
            "type": "text",
            "id": "question_5",
            "label": "Question 5"
          }, {
            "type": "richtext",
            "id": "answer_5",
            "label": "Answer 5"
          }, {
            "type": "text",
            "id": "question_6",
            "label": "Question 6"
          }, {
            "type": "richtext",
            "id": "answer_6",
            "label": "Answer 6"
          }, {
            "type": "text",
            "id": "question_7",
            "label": "Question 7"
          }, {
            "type": "richtext",
            "id": "answer_7",
            "label": "Answer 7"
          }, {
            "type": "text",
            "id": "question_8",
            "label": "Question 8"
          }, {
            "type": "richtext",
            "id": "answer_8",
            "label": "Answer 8"
          }, {
            "type": "text",
            "id": "question_9",
            "label": "Question 9"
          }, {
            "type": "richtext",
            "id": "answer_9",
            "label": "Answer 9"
          }, {
            "type": "text",
            "id": "question_10",
            "label": "Question 10"
          }, {
            "type": "richtext",
            "id": "answer_10",
            "label": "Answer 10"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "FAQ Multi-Collapsible Sections",
        "blocks": [
          {
            "type": "custom_collapsible_row"
          }, {
            "type": "custom_collapsible_row"
          }, {
            "type": "custom_collapsible_row"
          }, {
            "type": "custom_collapsible_row"
          }
        ]
      }
    ]
  }
{% endschema %}